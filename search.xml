<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>V8引擎中JS数组的sort排序原理</title>
    <url>/2018/04/06/V8%E5%BC%95%E6%93%8E%E4%B8%ADJS%E6%95%B0%E7%BB%84%E7%9A%84sort%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近时不时的刷一刷算法题，经常需要用到数组的排序，但是因为本人算法并不是很好，自己写的排序简直是入不得眼，性能也是被别人的完爆，后来干脆也不自己写排序了，就直接用了js的sort函数，发现性能还不错。所以就决定研究一下sort的排序原理（各浏览器实现并不一致，此文限于V8）。</p>
<span id="more"></span>
<h4 id="V8引擎的sort排序原理"><a href="#V8引擎的sort排序原理" class="headerlink" title="V8引擎的sort排序原理"></a>V8引擎的sort排序原理</h4><p>排序原理无非也就是算法。<br>那我们不妨来看看v8在排序算法上是怎么做的:(<strong>重点关注:第2-3行的注释，第17-31、51-134行</strong>)<br>详见源码：<a href="https://github.com/v8/v8/blob/6.7.241/src/js/array.js#L668">array.js#L668</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InnerArraySort</span>(<span class="params">array, length, comparefn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// In-place QuickSort algorithm.</span></span><br><span class="line">  <span class="comment">// For short (length &lt;= 10) arrays, insertion sort is used for efficiency.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!IS_CALLABLE(comparefn)) &#123;</span><br><span class="line">    comparefn = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (x === y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (%_IsSmi(x) &amp;&amp; %_IsSmi(y)) &#123;</span><br><span class="line">        <span class="keyword">return</span> %SmiLexicographicCompare(x, y);</span><br><span class="line">      &#125;</span><br><span class="line">      x = TO_STRING(x);</span><br><span class="line">      y = TO_STRING(y);</span><br><span class="line">      <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> x &lt; y ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">InsertionSort</span>(<span class="params">a, <span class="keyword">from</span>, to</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">from</span> + <span class="number">1</span>; i &lt; to; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> element = a[i];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = i - <span class="number">1</span>; j &gt;= <span class="keyword">from</span>; j--) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = a[j];</span><br><span class="line">        <span class="keyword">var</span> order = comparefn(tmp, element);</span><br><span class="line">        <span class="keyword">if</span> (order &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          a[j + <span class="number">1</span>] = tmp;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      a[j + <span class="number">1</span>] = element;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">GetThirdIndex</span>(<span class="params">a, <span class="keyword">from</span>, to</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t_array = <span class="keyword">new</span> InternalArray();</span><br><span class="line">    <span class="comment">// Use both &#x27;from&#x27; and &#x27;to&#x27; to determine the pivot candidates.</span></span><br><span class="line">    <span class="keyword">var</span> increment = <span class="number">200</span> + ((to - <span class="keyword">from</span>) &amp; <span class="number">15</span>);</span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">from</span> += <span class="number">1</span>;</span><br><span class="line">    to -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">from</span>; i &lt; to; i += increment) &#123;</span><br><span class="line">      t_array[j] = [i, a[i]];</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">    t_array.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> comparefn(a[<span class="number">1</span>], b[<span class="number">1</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> third_index = t_array[t_array.length &gt;&gt; <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> third_index;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">QuickSort</span>(<span class="params">a, <span class="keyword">from</span>, to</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> third_index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="comment">// Insertion sort is faster for short arrays.</span></span><br><span class="line">      <span class="keyword">if</span> (to - <span class="keyword">from</span> &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">        InsertionSort(a, <span class="keyword">from</span>, to);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (to - <span class="keyword">from</span> &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">        third_index = GetThirdIndex(a, <span class="keyword">from</span>, to);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        third_index = <span class="keyword">from</span> + ((to - <span class="keyword">from</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Find a pivot as the median of first, last and middle element.</span></span><br><span class="line">      <span class="keyword">var</span> v0 = a[<span class="keyword">from</span>];</span><br><span class="line">      <span class="keyword">var</span> v1 = a[to - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">var</span> v2 = a[third_index];</span><br><span class="line">      <span class="keyword">var</span> c01 = comparefn(v0, v1);</span><br><span class="line">      <span class="keyword">if</span> (c01 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// v1 &lt; v0, so swap them.</span></span><br><span class="line">        <span class="keyword">var</span> tmp = v0;</span><br><span class="line">        v0 = v1;</span><br><span class="line">        v1 = tmp;</span><br><span class="line">      &#125; <span class="comment">// v0 &lt;= v1.</span></span><br><span class="line">      <span class="keyword">var</span> c02 = comparefn(v0, v2);</span><br><span class="line">      <span class="keyword">if</span> (c02 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// v2 &lt;= v0 &lt;= v1.</span></span><br><span class="line">        <span class="keyword">var</span> tmp = v0;</span><br><span class="line">        v0 = v2;</span><br><span class="line">        v2 = v1;</span><br><span class="line">        v1 = tmp;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// v0 &lt;= v1 &amp;&amp; v0 &lt; v2</span></span><br><span class="line">        <span class="keyword">var</span> c12 = comparefn(v1, v2);</span><br><span class="line">        <span class="keyword">if</span> (c12 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// v0 &lt;= v2 &lt; v1</span></span><br><span class="line">          <span class="keyword">var</span> tmp = v1;</span><br><span class="line">          v1 = v2;</span><br><span class="line">          v2 = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// v0 &lt;= v1 &lt;= v2</span></span><br><span class="line">      a[<span class="keyword">from</span>] = v0;</span><br><span class="line">      a[to - <span class="number">1</span>] = v2;</span><br><span class="line">      <span class="keyword">var</span> pivot = v1;</span><br><span class="line">      <span class="keyword">var</span> low_end = <span class="keyword">from</span> + <span class="number">1</span>;   <span class="comment">// Upper bound of elements lower than pivot.</span></span><br><span class="line">      <span class="keyword">var</span> high_start = to - <span class="number">1</span>;  <span class="comment">// Lower bound of elements greater than pivot.</span></span><br><span class="line">      a[third_index] = a[low_end];</span><br><span class="line">      a[low_end] = pivot;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// From low_end to i are elements equal to pivot.</span></span><br><span class="line">      <span class="comment">// From i to high_start are elements that haven&#x27;t been compared yet.</span></span><br><span class="line">      partition: <span class="keyword">for</span> (<span class="keyword">var</span> i = low_end + <span class="number">1</span>; i &lt; high_start; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> element = a[i];</span><br><span class="line">        <span class="keyword">var</span> order = comparefn(element, pivot);</span><br><span class="line">        <span class="keyword">if</span> (order &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          a[i] = a[low_end];</span><br><span class="line">          a[low_end] = element;</span><br><span class="line">          low_end++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (order &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">do</span> &#123;</span><br><span class="line">            high_start--;</span><br><span class="line">            <span class="keyword">if</span> (high_start == i) <span class="keyword">break</span> partition;</span><br><span class="line">            <span class="keyword">var</span> top_elem = a[high_start];</span><br><span class="line">            order = comparefn(top_elem, pivot);</span><br><span class="line">          &#125; <span class="keyword">while</span> (order &gt; <span class="number">0</span>);</span><br><span class="line">          a[i] = a[high_start];</span><br><span class="line">          a[high_start] = element;</span><br><span class="line">          <span class="keyword">if</span> (order &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            element = a[i];</span><br><span class="line">            a[i] = a[low_end];</span><br><span class="line">            a[low_end] = element;</span><br><span class="line">            low_end++;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (to - high_start &lt; low_end - <span class="keyword">from</span>) &#123;</span><br><span class="line">        QuickSort(a, high_start, to);</span><br><span class="line">        to = low_end;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        QuickSort(a, <span class="keyword">from</span>, low_end);</span><br><span class="line">        <span class="keyword">from</span> = high_start;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p>主要注释如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// In-place QuickSort algorithm.</span></span><br><span class="line"><span class="comment">// For short (length &lt;= 10) arrays, insertion sort is used for efficiency.</span></span><br></pre></td></tr></table></figure>
<p>根据上面的代码及注释可以了解，v8引擎sort排序策略是在数组长度小于10时使用 <code>InsertionSort(插入排序)</code>，在大于10时使用 <code>In-place QuickSort(原地分区版的快速排序，即使用较少的空间实现的快速排序)</code></p>
<h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>虽然只是使用了两种排序算法，但已经可以满足大部分的场景，如果有自己的特殊的场景或者说不适合使用插入排序和快排时，建议还是自己实现一套有针对性的排序策略，而不是使用原生的sort来进行排序，毕竟sort在不同的浏览器下实现也是有不同的。</p>
<h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4><h5 id="插入排序（稳定）"><a href="#插入排序（稳定）" class="headerlink" title="插入排序（稳定）"></a>插入排序（稳定）</h5><p>时间复杂度: 最差 O(n<sup>2</sup>) 平均 O(n<sup>2</sup>)<br>空间复杂度：O(1)</p>
<h5 id="快速排序（不稳定）"><a href="#快速排序（不稳定）" class="headerlink" title="快速排序（不稳定）"></a>快速排序（不稳定）</h5><p>时间复杂度: 最差 O(n<sup>2</sup>) 平均 O(n*log<sub>2</sub><sup>n</sup>)<br>空间复杂度：O(log<sub>2</sub><sup>n</sup>) ~ O(n)</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>V8</tag>
        <tag>sort</tag>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Taro的图片上传组件实现</title>
    <url>/2019/08/12/%E5%9F%BA%E4%BA%8ETaro%E7%9A%84%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>因为最近在项目中经常遇到图片上传的场景，而Taro也是最近才崛起的小程序框架，在生态方面还是偏薄弱，没找到相关的轮子，索性自己写一个简单的上传组件，以后业务复杂了再在此基础上进行扩展。</p>
<span id="more"></span>
<p>本例只做一个简单的基于Taro的图片上传组件的实现，使用Taro来做跨端处理，这里微信小程序以小程序为主，其他端没有试过，有兴趣的同学可以自己尝试。</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>在Taro的基础上实现上传功能，这里主要是调用两个基础API</p>
<ol>
<li>选择图片的API: <a href="https://taro-docs.jd.com/taro/docs/apis/multimedia/images/chooseImage.html">Taro.chooseImage</a></li>
<li>上传文件的API: <a href="https://taro-docs.jd.com/taro/docs/apis/network/fileTransfer/uploadFile.html">Taro.uploadFile</a></li>
</ol>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p><em>注1:</em> 请务必保证自己的Taro已安装，详情教程请见: <a href="https://taro-docs.jd.com/taro/docs/GETTING-STARTED.html">Taro官放文档</a><br><em>注2:</em> 因为我们以实现上传七牛云为例, 所以代码里面上传地址为七牛的地址, 并且有获取token的操作, 如果需要上传到自己的服务器可修改<code>uploadUrl</code>(上传地址), 如果后台需要类似的token鉴权, 可在uploadFile API参数<code>formData</code>上加入鉴权参数<br><em>注3:</em> 为了布局方便样式使用了TaroUI的flex布局系统，需要事先安装<a href="https://taro-ui.aotu.io/#/docs/quickstart">TaroUI</a>   (也可不使用TaroUI自己写样式)<br><em>注4:</em> 这里不使用TaroUI的ImagePicker是因为考虑以后的扩展、自定义样式，如果喜欢可以自行结合ImagePicker使用</p>
<h5 id="组件JS代码"><a href="#组件JS代码" class="headerlink" title="组件JS代码"></a>组件JS代码</h5><p>组件引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* src/components/ImageUpload/index.jsx */</span></span><br><span class="line"><span class="comment">// import &amp; constant</span></span><br><span class="line"><span class="keyword">import</span> Taro, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;@tarojs/taro&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; View, Image &#125; <span class="keyword">from</span> <span class="string">&#x27;@tarojs/components&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.scss&#x27;</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
<p>组件默认属性，初始化函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">  imageFiles: [], <span class="comment">// 图片列表</span></span><br><span class="line">  maxLength: <span class="number">4</span>, <span class="comment">// 最大可上传图片数</span></span><br><span class="line">  <span class="function"><span class="title">onChange</span>(<span class="params"></span>)</span> &#123;&#125;, <span class="comment">// 图片改变事件回调</span></span><br><span class="line">  onImageClick () &#123;&#125;, <span class="comment">// 图片点击事件回调</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title">constructor</span> (<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="built_in">super</span>(props)</span><br><span class="line">  <span class="built_in">this</span>.picUrls = []</span><br><span class="line">  <span class="built_in">this</span>.state = &#123;</span><br><span class="line">    uploadUrl: <span class="string">&#x27;https://up-z2.qiniup.com&#x27;</span>, <span class="comment">// 七牛的上传域名</span></span><br><span class="line">    token: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    uploadCurrent: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请求后台获取七牛token(<em>注:</em> 后台如何从七牛获取token请参考七牛的文档)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">componentWillMount () &#123;</span><br><span class="line">  <span class="comment">// 这里是进入页面即获取token，具体获取时机可根据需求自行把握</span></span><br><span class="line">  <span class="built_in">this</span>.getToken()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取七牛token</span></span><br><span class="line"><span class="function"><span class="title">getToken</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"> Taro.request(&#123;</span><br><span class="line">   url: <span class="string">&#x27;xxxx&#x27;</span>, <span class="comment">// 获取七牛云上传文件的token的后台接口(详细请和后台沟通)</span></span><br><span class="line">   method: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">   success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">       token: res.data.data.accessKey <span class="comment">// 获取从后台传回的token</span></span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>选择并上传图片</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handlePlusClick () &#123;</span><br><span class="line"> <span class="built_in">this</span>.chooseImage()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 选择图片</span></span><br><span class="line">chooseImage () &#123;</span><br><span class="line"> <span class="keyword">const</span> &#123; imageFiles, maxLength &#125; = <span class="built_in">this</span>.props</span><br><span class="line"> <span class="keyword">const</span> limit = maxLength - imageFiles.length</span><br><span class="line"> Taro.chooseImage(&#123;</span><br><span class="line">   count: limit,</span><br><span class="line">   success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.uploadImage(res.tempFilePaths)</span><br><span class="line">   &#125;,</span><br><span class="line">   complete: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上传图片</span></span><br><span class="line"><span class="comment">// 这里涉及到多图一起上传的处理</span></span><br><span class="line">uploadImage (tempFilePaths) &#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; uploadCurrent, uploadUrl, token &#125; = <span class="built_in">this</span>.state</span><br><span class="line">   <span class="keyword">const</span> &#123; onChange, imageFiles &#125; = <span class="built_in">this</span>.props</span><br><span class="line">   Taro.uploadFile(&#123;</span><br><span class="line">      url: uploadUrl,</span><br><span class="line">      filePath: tempFilePaths[uploadCurrent],</span><br><span class="line">      name: <span class="string">&#x27;file&#x27;</span>,</span><br><span class="line">      formData: &#123; <span class="string">&#x27;token&#x27;</span>: token &#125;,</span><br><span class="line">      success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">res.errMsg === <span class="string">&quot;uploadFile:ok&quot;</span></span>)</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(res.data)</span><br><span class="line">          <span class="comment">// 在七牛云后台设定的域名拼接上key即上传至七牛的图片地址</span></span><br><span class="line">          <span class="comment">// 具体见七牛官方文档</span></span><br><span class="line">          <span class="keyword">const</span> imageUrl = <span class="string">&#x27;https://xxxxx/&#x27;</span> + data.key</span><br><span class="line">          <span class="built_in">this</span>.picUrls.push(imageUrl)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="built_in">console</span>.error(<span class="string">&#x27;图片上传失败&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">&#x27;图片上传失败&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      complete: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">uploadCurrent === tempFilePaths.length - <span class="number">1</span></span>)</span> &#123; <span class="comment">// 图片全部上传完成</span></span><br><span class="line">          <span class="keyword">const</span> totalFiles = imageFiles.concat(<span class="built_in">this</span>.picUrls)</span><br><span class="line">          onChange(totalFiles)</span><br><span class="line">          <span class="built_in">this</span>.picUrls = []</span><br><span class="line">          <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            uploadCurrent: <span class="number">0</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 图片没有全部上传完成</span></span><br><span class="line">          <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            uploadCurrent: uploadCurrent + <span class="number">1</span></span><br><span class="line">          &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.uploadImage(tempFilePaths)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="组件JSX结构"><a href="#组件JSX结构" class="headerlink" title="组件JSX结构"></a>组件JSX结构</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line">render () &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;View className=<span class="string">&#x27;at-row image-upload&#x27;</span>&gt;</span><br><span class="line">     &#123;files.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> (</span><br><span class="line">       &lt;View</span><br><span class="line">        key=&#123;item + index&#125;</span><br><span class="line">        className=<span class="string">&#x27;at-col at-col-3 image-upload__item&#x27;</span></span><br><span class="line">       &gt;</span><br><span class="line">         &lt;Image</span><br><span class="line">           className=<span class="string">&#x27;image-upload__image&#x27;</span></span><br><span class="line">           src=&#123;item&#125;</span><br><span class="line">           onClick=&#123;onImageClick.bind(<span class="built_in">this</span>, item)&#125;</span><br><span class="line">         &gt;&lt;/Image&gt;</span><br><span class="line">         &lt;Image</span><br><span class="line">          onClick=&#123;<span class="built_in">this</span>.handleImageDelete.bind(<span class="built_in">this</span>, index)&#125;</span><br><span class="line">          className=<span class="string">&#x27;image-upload__close&#x27;</span></span><br><span class="line">          src=<span class="string">&#x27;close.png&#x27;</span></span><br><span class="line">         &gt;&lt;/Image&gt;</span><br><span class="line">       &lt;/View&gt;</span><br><span class="line">     ))&#125;</span><br><span class="line">     &#123;files.length &lt; maxLength ? <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">className</span>=<span class="string">&#x27;at-col at-col-3&#x27;</span>&gt;</span></span></span><br><span class="line">       &lt;View</span><br><span class="line">        className=&#x27;image-upload__plus&#x27;</span><br><span class="line">        onClick=&#123;this.handlePlusClick.bind(this)&#125;</span><br><span class="line">       &gt;</span><br><span class="line">         &lt;Image</span><br><span class="line">          className=&#x27;image-upload__plus--image&#x27;</span><br><span class="line">          src=&#x27;add_pic.png&#x27;</span><br><span class="line">         &gt;&lt;/Image&gt;</span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span> : <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>
<h5 id="组件基础样式"><a href="#组件基础样式" class="headerlink" title="组件基础样式"></a>组件基础样式</h5><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* src/components/ImageUpload/index.scss */</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;~taro-ui/dist/style/components/flex.scss&#x27;</span>;</span><br><span class="line"><span class="selector-class">.image-upload</span>&#123;</span><br><span class="line">  &amp;__item&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;__image&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">126px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">126px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">8px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;__close&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">88px</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;__plus--image&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">126px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">126px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="页面内使用组件"><a href="#页面内使用组件" class="headerlink" title="页面内使用组件"></a>页面内使用组件</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//src/pages/index/index.jsx</span></span><br><span class="line"><span class="title">constructor</span> (<span class="params">props</span>) &#123;</span><br><span class="line"> <span class="built_in">super</span>(props)</span><br><span class="line"> <span class="built_in">this</span>.state = &#123;</span><br><span class="line">   imageFiles: []</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 图片改变监听</span></span><br><span class="line">handleChange (files) &#123;</span><br><span class="line"> <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">   imageFiles: files</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 图片点击监听(这里是图片点击之后调起图片预览接口)</span></span><br><span class="line">handleImageClick (currentUrl) &#123;</span><br><span class="line"> Taro.previewImage(&#123;</span><br><span class="line">   current: currentUrl,</span><br><span class="line">   urls: <span class="built_in">this</span>.state.imageFiles</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; imageFiles &#125; = <span class="built_in">this</span>.state</span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">    &lt;View className=<span class="string">&#x27;index&#x27;</span>&gt;</span><br><span class="line">      &lt;ImageUpload</span><br><span class="line">        imageFiles=&#123;imageFiles&#125;</span><br><span class="line">        onChange=&#123;<span class="built_in">this</span>.handleChange.bind(<span class="built_in">this</span>)&#125;</span><br><span class="line">        onImageClick=&#123;<span class="built_in">this</span>.handleImageClick.bind(<span class="built_in">this</span>)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">   )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一直没找到jsx在md上的渲染方式，代码块可能会有一些高亮错误，将就着看吧，以上。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
        <tag>微信小程序</tag>
        <tag>图片上传</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序滚动穿透解决方案</title>
    <url>/2018/06/25/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><h5 id="滚动穿透是什么"><a href="#滚动穿透是什么" class="headerlink" title="滚动穿透是什么"></a>滚动穿透是什么</h5><p>对于这个问题我在网上找到的定义是这样的：</p>
<blockquote>
<p>移动端弹出fixed弹窗的话，在弹窗上滑动会导致下层的页面跟着滚动，这个叫 “滚动穿透”</p>
</blockquote>
<p>准确的说这更像是一个移动端的 <code>BUG</code></p>
<span id="more"></span>

<h5 id="小程序的滚动穿透"><a href="#小程序的滚动穿透" class="headerlink" title="小程序的滚动穿透"></a>小程序的滚动穿透</h5><p>滚动穿透想必大家也是有做过的，但是网上的大多是一些移动端H5的一些滚动穿透的问题，但是对于小程序的滚动穿透解决方案却很少。<br>其实移动端H5的滚动穿透和小程序的滚动穿透大部分也并没有什么区别，解决思路都是在弹窗呼起的时候固定住底层面板或者不被弹窗内的事件所影响。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>那我们就来看看小程序滚动穿透<font color="red">已知</font>的几个方案(<font color="red">不负责任的备注: 此处解决方案来源网络综合了主要的解决方案，仅供参考，侵删!!</font>)</p>
<ol>
<li><p>在弹窗内没有滚动的时候，我们在蒙版和弹出层上加入catchtouchmove</p>
</li>
<li><p>在弹窗内有滚动的时候（比如在弹出层是很多的列表数据，需要滚动时），这里主要有两种方法：<br>(1) 在弹窗打开时在底部加<code>position:fixed</code>样式固定住，在弹窗关闭的时候移除这个样式。但是这个样式会导致底部位置回到顶部，而不是打开的弹窗时的位置。如果对产品要求不是很严格的话，这个方法勉强一试。<br>(2) 底部使用scroll-view组件而不是用view，但是使用scroll-view组件会有一定的BUG:</p>
<blockquote>
<p><b>Bug &amp; Tip</b><br>tip: 请勿在 scroll-view 中使用 textarea、map、canvas、video 组件<br>tip: scroll-into-view 的优先级高于 scroll-top<br>tip: 在滚动 scroll-view 时会阻止页面回弹，所以在 scroll-view 中滚动，是无法触发 onPullDownRefresh<br>tip: 若要使用下拉刷新，请使用页面的滚动，而不是 scroll-view ，这样也能通过点击顶部状态栏回到页面顶部<br>详见：<a href="https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html">微信小程序开发文档</a></p>
</blockquote>
</li>
</ol>
<h4 id="将就的总结"><a href="#将就的总结" class="headerlink" title="将就的总结"></a>将就的总结</h4><blockquote>
<p>综上，并没有什么完美的解决方案可以解决小程序内的滚动穿透问题</p>
</blockquote>
<p>在2(1)的方法里，我也想过能不能使用微信的wx.pageScrollTo()来解决fixed后的回到顶部的问题，但是并没有什么用（导致底层界面渲染成空白），并不能像移动端H5那样可以使用css+js方案来完美的解决。</p>
<h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4><p>附上:<a href="https://github.com/pod4g/tool/wiki/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F%E9%97%AE%E9%A2%98">移动端H5滚动穿透的解决方案</a></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>前端</tag>
        <tag>滚动穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序远程图片转本地临时图片解决方案</title>
    <url>/2018/10/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%BF%9C%E7%A8%8B%E5%9B%BE%E7%89%87%E8%BD%AC%E6%9C%AC%E5%9C%B0%E4%B8%B4%E6%97%B6%E5%9B%BE%E7%89%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>微信小程序里有些时候只能使用本地临时图片而不能用远程图片（如：2.3.0以下的Map组件内的markers的图片）</p>
<blockquote>
<p>备注: <font color="red">低于2.3.0版本时做兼容使用，小程序在2.3.0之后makers已经支持远程图片</font><br>也适用于需要远程图片转本地临时图片的场景</p>
</blockquote>
<img src="/images/markers_icon_path_2.3.0.png" style="height:80px;">
当然这些都比较少见现在大部分使用远程图片即可解决，这里也只是对远程图片本地临时图片的一个简单探讨
<span id="more"></span>

<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><h4 id="单张图片转换"><a href="#单张图片转换" class="headerlink" title="单张图片转换"></a>单张图片转换</h4><p>对于单张远程图片转本地临时图片直接调用小程序提供的wx.getImageInfo接口:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;远程图片地址&#x27;</span></span><br><span class="line">wx.getImageInfo(&#123;</span><br><span class="line">  src: url,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// res.path - 取得本地临时图片地址</span></span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;,</span><br><span class="line">  fail: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="多张图片转换"><a href="#多张图片转换" class="headerlink" title="多张图片转换"></a>多张图片转换</h4><p>要得到多张图片的本地地址，将所有的请求priomise化，然后将所有的promise遍历依次取得本地图片临时数据</p>
<h5 id="将wx-getImageInfo函数Promise化"><a href="#将wx-getImageInfo函数Promise化" class="headerlink" title="将wx.getImageInfo函数Promise化"></a>将wx.getImageInfo函数Promise化</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> localUrls = [] <span class="comment">// 得到的临时图片地址数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImgPromisefy</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    wx.getImageInfo(&#123;</span><br><span class="line">      src: url,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        resolve(res)</span><br><span class="line">        <span class="comment">// res.path - 取得本地临时图片地址</span></span><br><span class="line">        <span class="comment">// localUrls.push(res.path) - 将取得的本地临时地址push进数组</span></span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// reject(err)</span></span><br><span class="line">        resolve(err) <span class="comment">// 此处为了在图片加载失败时 仍可以加载下一张图片</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="进行多次异步处理得到所有的图片地址"><a href="#进行多次异步处理得到所有的图片地址" class="headerlink" title="进行多次异步处理得到所有的图片地址"></a>进行多次异步处理得到所有的图片地址</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMutilIconPath</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> urls = [</span><br><span class="line">    <span class="string">&#x27;远程图片地址1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;远程图片地址2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;远程图片地址3&#x27;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">let</span> multiPromise = urls.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getImgPromisefy(item)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> multiPromise.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">cur, next</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cur.then(next)</span><br><span class="line">          &#125;, <span class="built_in">Promise</span>.resolve()).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 全部转换完成时的回调函数</span></span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">          &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考: <a href="https://segmentfault.com/a/1190000004191366">Promise与遍历（循环，无穷多的then）遇到的问题及三个解决方案</a></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>前端</tag>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索字符在搜索结果中高亮效果的前端JS实现</title>
    <url>/2017/11/24/%E6%90%9C%E7%B4%A2%E5%AD%97%E7%AC%A6%E5%9C%A8%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E4%B8%AD%E9%AB%98%E4%BA%AE%E6%95%88%E6%9E%9C%E7%9A%84%E5%89%8D%E7%AB%AFJS%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>百度的效果:<br><img src="/images/baidu_search_eg.jpg" style="height:400px;"></p>
<span id="more"></span>

<h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p><em>注:</em> 我们这里不做的像百度的那样复杂，只是做简单的搜索高亮，也只限于前端代码的展示</p>
<p>原理: 将后台搜索出来的结果进行一层转换然后进行前端渲染，转换搜索的字符串，即用正则匹配出来的搜索字符串，渲染成html</p>
<h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [搜索高亮效果]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;string&#125;</span> </span>matchStr [要搜索的字符串]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;string&#125;</span> </span>result   [搜索出来的结果（即后台根据搜索内容返回的结果）]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span>          </span>[返回修饰过的html]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchHighlight</span>(<span class="params">matchStr,result</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> showHtml;<span class="comment">//显示在下拉列表里的html(一列)</span></span><br><span class="line">    <span class="keyword">var</span> reg ;<span class="comment">//要替换的正则内容</span></span><br><span class="line">    <span class="keyword">var</span> highLightColor = <span class="string">&#x27;#76a6ef&#x27;</span>;<span class="comment">//要高亮的颜色</span></span><br><span class="line">    <span class="keyword">var</span> pattern = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;[`~!@#$^&amp;*%()+=|&#123;&#125;&#x27;:;&#x27;,\\[\\].&lt;&gt;/?~！@#￥……&amp;*（）——|&#123;&#125;【】‘；：”“&#x27;。，、？]&quot;</span>,<span class="string">&quot;g&quot;</span>);</span><br><span class="line"></span><br><span class="line">    matchStr = matchStr.replace(pattern,<span class="function"><span class="keyword">function</span>(<span class="params">special</span>)</span>&#123;<span class="comment">//对特殊字符进行处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;\\&#x27;</span>+special;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(matchStr,<span class="string">&quot;gi&quot;</span>);<span class="comment">//全局搜索,不区分大小写</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">replaceFuc</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> replaceHtml = <span class="string">&#x27;&#x27;</span>;<span class="comment">//将要替换成的html(即高亮的地方)</span></span><br><span class="line">        replaceHtml += <span class="string">&#x27;&lt;span style=&quot;color:&#x27;</span>+highLightColor+<span class="string">&#x27;;text-decoration:underline;&quot;&gt;&#x27;</span>;</span><br><span class="line">        replaceHtml += str;</span><br><span class="line">        replaceHtml += <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> replaceHtml;</span><br><span class="line">    &#125;</span><br><span class="line">    showHtml = result.replace(reg,<span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> replaceFuc(str);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> showHtml;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在需要使用的地方，调用上述函数即可（当然上述函数只是简单的实现，你可以对它进行加强）<br>注意的地方：<br>1.要对特殊字符进行处理 否则会导致对正则表达式的冲突<br>2.要对字符进行转义，防止代码注入(上述代码未给出,加入转义函数就行，见附录)<br>3.本函数高亮的内容是不区分大小写的，如果要区分大小写，可以直接去掉正则参数i</p>
<h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*html转义函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlEncodeByRegExp</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!str) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (str.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    s = str.replace(<span class="regexp">/&amp;/g</span>, <span class="string">&quot;&amp;amp;&quot;</span>);</span><br><span class="line">    s = s.replace(<span class="regexp">/&lt;/g</span>, <span class="string">&quot;&amp;lt;&quot;</span>);</span><br><span class="line">    s = s.replace(<span class="regexp">/&gt;/g</span>, <span class="string">&quot;&amp;gt;&quot;</span>);</span><br><span class="line">    s = s.replace(<span class="regexp">/ /g</span>, <span class="string">&quot;&amp;nbsp;&quot;</span>);</span><br><span class="line">    s = s.replace(<span class="regexp">/\&#x27;/g</span>, <span class="string">&quot;&amp;#39;&quot;</span>);</span><br><span class="line">    s = s.replace(<span class="regexp">/\&quot;/g</span>, <span class="string">&quot;&amp;quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>规范Git Commit Message</title>
    <url>/2021/06/12/%E8%A7%84%E8%8C%83Git-Commit-Message/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>因为现有的项目中 commit message 杂乱无章，对于代码的解释不够清晰，无法具体的了解此次提交属于哪个功能细节，在代码的回溯上花费的时间代价较大，为了构建一个清晰的 message 体系，便于以后代码的溯源，也为了提交者慎重的对待自己的每一次提交，对以后的 commit message 进行简单规范。</p>
<h4 id="统一提交格式"><a href="#统一提交格式" class="headerlink" title="统一提交格式"></a>统一提交格式</h4><p><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</code></p>
<blockquote>
<p><em>关于git commit message的相关格式规范网上有很多，这里主要讲怎么在项目中使用commitlint来实施这些规范</em><br>参考：<a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.uyo6cb12dt6w">Angular提交规范(英文原文档)</a> <a href="https://github.com/isLishude/blog/issues/69">【翻译】AngularJS Git 提交信息规范</a></p>
</blockquote>
<span id="more"></span>

<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>使用 git 强制校验提交的 message 是否符合规范，我们使用 git hooks 能力来限制提交，主要使用 commit-msg 钩子。</p>
<h4 id="主要工具"><a href="#主要工具" class="headerlink" title="主要工具"></a>主要工具</h4><ul>
<li><a href="https://commitlint.js.org/#/">commitlint</a> (version: 12.1.4)</li>
<li><a href="https://typicode.github.io/husky">husky</a> (version: 6.0.0)</li>
</ul>
<h4 id="使用安装"><a href="#使用安装" class="headerlink" title="使用安装"></a>使用安装</h4><p>第一步</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 commitlint 相关</span></span><br><span class="line">npm install --save-dev @commitlint/cli @commitlint/config-conventional</span><br></pre></td></tr></table></figure>

<p>第二步</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装husky</span></span><br><span class="line">npm install husky --save-dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">yarn add husky --dev</span><br></pre></td></tr></table></figure>

<p>第三步</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 激活hooks</span></span><br><span class="line">npx husky install</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">yarn husky install</span><br></pre></td></tr></table></figure>

<p>第四步<br>项目根目录创建配置文件</p>
<ol>
<li>commitlint 配置文件(commitlint.config.js)</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * commitlint.config.js</span></span><br><span class="line"><span class="comment"> * 详细配置规则参考</span></span><br><span class="line"><span class="comment"> * 规则解析：</span></span><br><span class="line"><span class="comment"> * https://github.com/conventional-changelog/commitlint/blob/master/docs/reference-rules.md</span></span><br><span class="line"><span class="comment"> * 完整规则示例：</span></span><br><span class="line"><span class="comment"> * https://github.com/conventional-changelog/commitlint/blob/master/<span class="doctag">@commitlint</span>/config-conventional/index.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="keyword">extends</span>: [<span class="string">&quot;@commitlint/config-conventional&quot;</span>],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * subject加上英文大小写规范限制</span></span><br><span class="line"><span class="comment">     * - 禁止使用&#x27;sentence-case&#x27;, &#x27;start-case&#x27;, &#x27;pascal-case&#x27;, &#x27;upper-case&#x27;</span></span><br><span class="line"><span class="comment">     * ep:</span></span><br><span class="line"><span class="comment">     * &#x27;subject-case&#x27;: [</span></span><br><span class="line"><span class="comment">     *      2,</span></span><br><span class="line"><span class="comment">     *      &#x27;never&#x27;,</span></span><br><span class="line"><span class="comment">     *      [&#x27;sentence-case&#x27;, &#x27;start-case&#x27;, &#x27;pascal-case&#x27;, &#x27;upper-case&#x27;],</span></span><br><span class="line"><span class="comment">     * ]</span></span><br><span class="line"><span class="comment">     * - 解除限制</span></span><br><span class="line"><span class="comment">     * ep:</span></span><br><span class="line"><span class="comment">     * &#x27;subject-case&#x27;: [0]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="string">&quot;subject-case&quot;</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * scope是否允许为空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * - scope不允许为空</span></span><br><span class="line"><span class="comment">     * ep:</span></span><br><span class="line"><span class="comment">     * &#x27;scope-empty&#x27;: [2, &#x27;never&#x27;]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * - scope允许为空</span></span><br><span class="line"><span class="comment">     * ep:</span></span><br><span class="line"><span class="comment">     * &#x27;scope-empty&#x27;: [0]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="string">&quot;scope-empty&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>],</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * type类型限定</span></span><br><span class="line"><span class="comment">     * - 只允许feat,fix,docs类型</span></span><br><span class="line"><span class="comment">     * ep:</span></span><br><span class="line"><span class="comment">     * &#x27;type-enum&#x27;: [</span></span><br><span class="line"><span class="comment">     *   2,</span></span><br><span class="line"><span class="comment">     *   &#x27;always&#x27;,</span></span><br><span class="line"><span class="comment">     *   [ &#x27;feat&#x27;,&#x27;fix&#x27;, &#x27;docs&#x27;,]</span></span><br><span class="line"><span class="comment">     * ]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="string">&quot;type-enum&quot;</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      <span class="string">&quot;always&quot;</span>,</span><br><span class="line">      [</span><br><span class="line">        <span class="string">&quot;feat&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fix&quot;</span>,</span><br><span class="line">        <span class="string">&quot;docs&quot;</span>,</span><br><span class="line">        <span class="string">&quot;style&quot;</span>,</span><br><span class="line">        <span class="string">&quot;refactor&quot;</span>,</span><br><span class="line">        <span class="string">&quot;perf&quot;</span>,</span><br><span class="line">        <span class="string">&quot;test&quot;</span>,</span><br><span class="line">        <span class="string">&quot;chore&quot;</span>,</span><br><span class="line">        <span class="string">&quot;revert&quot;</span>,</span><br><span class="line">        <span class="string">&quot;merge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sync&quot;</span>,</span><br><span class="line">      ],</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建 commit-msg 文件(.husky/commit-msg)</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line"></span><br><span class="line">npx --no-install commitlint --edit <span class="variable">$1</span></span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>测试 commitlint 是否生效</p>
<p><strong>生成项目以前提交中的问题</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx commitlint -- --from HEAD~1 --to HEAD --verbose</span><br></pre></td></tr></table></figure>

<p><strong>如果安装成功，输出大致如下(如果存在不符合规范的commit message)</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">⧗   input: Initial commit</span><br><span class="line">✖   subject may not be empty [subject-empty]</span><br><span class="line">✖   <span class="built_in">type</span> may not be empty [type-empty]</span><br><span class="line">✖   scope may not be empty [scope-empty]</span><br><span class="line"></span><br><span class="line">✖   found 1 problems, 0 warnings</span><br><span class="line">ⓘ   Get <span class="built_in">help</span>: https://github.com/conventional-changelog/commitlint/<span class="comment">#what-is-commitlint</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>安装完成即会对该项目下的git提交，都进行message规范校验。</p>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul>
<li>主要使用commitlint来做规则制定，更多详细文档，见<a href="https://commitlint.js.org/#/">官网</a></li>
<li>不要使用以下官网代码来生成配置文件，在window下会有编码格式问题<br><del><code>echo &quot;module.exports = &#123; extends: [&#39;@commitlint/config-conventional&#39;] &#125;;&quot; &gt; commitlint.config.js</code></del></li>
<li>不要使用husky生成commit-msg文件<br><del><code>npx husky add .husky/commit-msg &#39;npx --no-install commitlint --edit $1</code></del></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
        <category>规范</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Commit Message</tag>
        <tag>规范</tag>
        <tag>commitlint</tag>
        <tag>husky</tag>
      </tags>
  </entry>
</search>
